/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ICollateralManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assetValueInZUSD"
      | "collateralValueInZUSD"
      | "config"
      | "setAssetConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetValueInZUSD",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralValueInZUSD",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setAssetConfig",
    values: [AddressLike, boolean, BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetValueInZUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralValueInZUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetConfig",
    data: BytesLike
  ): Result;
}

export interface ICollateralManager extends BaseContract {
  connect(runner?: ContractRunner | null): ICollateralManager;
  waitForDeployment(): Promise<this>;

  interface: ICollateralManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetValueInZUSD: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  collateralValueInZUSD: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  config: TypedContractMethod<
    [asset: AddressLike],
    [
      [boolean, bigint, string, bigint] & {
        enabled: boolean;
        ltvBps: bigint;
        oracle: string;
        decimals: bigint;
      }
    ],
    "view"
  >;

  setAssetConfig: TypedContractMethod<
    [
      asset: AddressLike,
      enabled: boolean,
      ltvBps: BigNumberish,
      oracle: AddressLike,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assetValueInZUSD"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralValueInZUSD"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [asset: AddressLike],
    [
      [boolean, bigint, string, bigint] & {
        enabled: boolean;
        ltvBps: bigint;
        oracle: string;
        decimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAssetConfig"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      enabled: boolean,
      ltvBps: BigNumberish,
      oracle: AddressLike,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
