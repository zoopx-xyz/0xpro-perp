/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IRiskConfig {
  export type MarketRiskStruct = {
    imrBps: BigNumberish;
    mmrBps: BigNumberish;
    liqPenaltyBps: BigNumberish;
    makerFeeBps: BigNumberish;
    takerFeeBps: BigNumberish;
    maxLev: BigNumberish;
  };

  export type MarketRiskStructOutput = [
    imrBps: bigint,
    mmrBps: bigint,
    liqPenaltyBps: bigint,
    makerFeeBps: bigint,
    takerFeeBps: bigint,
    maxLev: bigint
  ] & {
    imrBps: bigint;
    mmrBps: bigint;
    liqPenaltyBps: bigint;
    makerFeeBps: bigint;
    takerFeeBps: bigint;
    maxLev: bigint;
  };
}

export interface IRiskConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getIMRBps"
      | "getLiqPenaltyBps"
      | "getMMRBps"
      | "getMarketRisk"
      | "requiredInitialMarginZ"
      | "risks"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getIMRBps",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiqPenaltyBps",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMMRBps",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRisk",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredInitialMarginZ",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "risks", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "getIMRBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiqPenaltyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMMRBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredInitialMarginZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "risks", data: BytesLike): Result;
}

export interface IRiskConfig extends BaseContract {
  connect(runner?: ContractRunner | null): IRiskConfig;
  waitForDeployment(): Promise<this>;

  interface: IRiskConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getIMRBps: TypedContractMethod<[marketId: BytesLike], [bigint], "view">;

  getLiqPenaltyBps: TypedContractMethod<
    [marketId: BytesLike],
    [bigint],
    "view"
  >;

  getMMRBps: TypedContractMethod<[marketId: BytesLike], [bigint], "view">;

  getMarketRisk: TypedContractMethod<
    [marketId: BytesLike],
    [IRiskConfig.MarketRiskStructOutput],
    "view"
  >;

  requiredInitialMarginZ: TypedContractMethod<
    [
      marketId: BytesLike,
      baseAsset: AddressLike,
      sizeRaw: BigNumberish,
      assetDecimals: BigNumberish,
      priceX1e18: BigNumberish
    ],
    [bigint],
    "view"
  >;

  risks: TypedContractMethod<
    [marketId: BytesLike],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getIMRBps"
  ): TypedContractMethod<[marketId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLiqPenaltyBps"
  ): TypedContractMethod<[marketId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMMRBps"
  ): TypedContractMethod<[marketId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarketRisk"
  ): TypedContractMethod<
    [marketId: BytesLike],
    [IRiskConfig.MarketRiskStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "requiredInitialMarginZ"
  ): TypedContractMethod<
    [
      marketId: BytesLike,
      baseAsset: AddressLike,
      sizeRaw: BigNumberish,
      assetDecimals: BigNumberish,
      priceX1e18: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "risks"
  ): TypedContractMethod<
    [marketId: BytesLike],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  filters: {};
}
