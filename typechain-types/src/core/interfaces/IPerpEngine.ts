/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPerpEngine {
  export type FillStruct = {
    fillId: BytesLike;
    account: AddressLike;
    marketId: BytesLike;
    isBuy: boolean;
    size: BigNumberish;
    priceZ: BigNumberish;
    feeZ: BigNumberish;
    fundingZ: BigNumberish;
    ts: BigNumberish;
  };

  export type FillStructOutput = [
    fillId: string,
    account: string,
    marketId: string,
    isBuy: boolean,
    size: bigint,
    priceZ: bigint,
    feeZ: bigint,
    fundingZ: bigint,
    ts: bigint
  ] & {
    fillId: string;
    account: string;
    marketId: string;
    isBuy: boolean;
    size: bigint;
    priceZ: bigint;
    feeZ: bigint;
    fundingZ: bigint;
    ts: bigint;
  };
}

export interface IPerpEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computeAccountMMRZ"
      | "getPosition"
      | "getUnrealizedPnlZ"
      | "recordFill"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeAccountMMRZ",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealizedPnlZ",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordFill",
    values: [IPerpEngine.FillStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAccountMMRZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealizedPnlZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recordFill", data: BytesLike): Result;
}

export interface IPerpEngine extends BaseContract {
  connect(runner?: ContractRunner | null): IPerpEngine;
  waitForDeployment(): Promise<this>;

  interface: IPerpEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeAccountMMRZ: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getPosition: TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [bigint],
    "view"
  >;

  getUnrealizedPnlZ: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  recordFill: TypedContractMethod<
    [f: IPerpEngine.FillStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeAccountMMRZ"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnrealizedPnlZ"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordFill"
  ): TypedContractMethod<[f: IPerpEngine.FillStruct], [void], "nonpayable">;

  filters: {};
}
