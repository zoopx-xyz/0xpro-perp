/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPerpEngine {
  export type FillStruct = {
    fillId: BytesLike;
    account: AddressLike;
    marketId: BytesLike;
    isBuy: boolean;
    size: BigNumberish;
    priceZ: BigNumberish;
    feeZ: BigNumberish;
    fundingZ: BigNumberish;
    ts: BigNumberish;
  };

  export type FillStructOutput = [
    fillId: string,
    account: string,
    marketId: string,
    isBuy: boolean,
    size: bigint,
    priceZ: bigint,
    feeZ: bigint,
    fundingZ: bigint,
    ts: bigint
  ] & {
    fillId: string;
    account: string;
    marketId: string;
    isBuy: boolean;
    size: bigint;
    priceZ: bigint;
    feeZ: bigint;
    fundingZ: bigint;
    ts: bigint;
  };
}

export interface PerpEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "closePosition"
      | "collateralManager"
      | "computeAccountMMRZ"
      | "entryPriceZ"
      | "feeSplitter"
      | "getOpenMarketsForAccount"
      | "getPosition"
      | "getPositionMarginRatioBps"
      | "getRoleAdmin"
      | "getUnrealizedPnlZ"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "liquidate"
      | "markets"
      | "openPosition"
      | "oracleRouter"
      | "positions"
      | "proxiableUUID"
      | "recordFill"
      | "registerMarket(bytes32,address,uint8,string)"
      | "registerMarket(bytes32,address,uint8)"
      | "renounceRole"
      | "revokeRole"
      | "riskConfig"
      | "seenFill"
      | "setDeps"
      | "supportsInterface"
      | "treasury"
      | "updatePositionMargin"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vault"
      | "zUsd"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "Liquidation"
      | "OrderFilled"
      | "PositionLiquidated"
      | "PositionUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TradeExecuted"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAccountMMRZ",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPriceZ",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeSplitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenMarketsForAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMarginRatioBps",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealizedPnlZ",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "markets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [BytesLike, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordFill",
    values: [IPerpEngine.FillStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarket(bytes32,address,uint8,string)",
    values: [BytesLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarket(bytes32,address,uint8)",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "riskConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seenFill", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setDeps",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePositionMargin",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "zUsd", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAccountMMRZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entryPriceZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenMarketsForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMarginRatioBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealizedPnlZ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recordFill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMarket(bytes32,address,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMarket(bytes32,address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seenFill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDeps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zUsd", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    account: AddressLike,
    marketId: BytesLike,
    closedSize: BigNumberish,
    priceZ: BigNumberish,
    penaltyZ: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    marketId: string,
    closedSize: bigint,
    priceZ: bigint,
    penaltyZ: bigint
  ];
  export interface OutputObject {
    account: string;
    marketId: string;
    closedSize: bigint;
    priceZ: bigint;
    penaltyZ: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    account: AddressLike,
    marketId: BytesLike,
    fillId: BytesLike,
    isBuy: boolean,
    size: BigNumberish,
    priceZ: BigNumberish,
    feeZ: BigNumberish,
    fundingZ: BigNumberish,
    positionAfter: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    marketId: string,
    fillId: string,
    isBuy: boolean,
    size: bigint,
    priceZ: bigint,
    feeZ: bigint,
    fundingZ: bigint,
    positionAfter: bigint
  ];
  export interface OutputObject {
    account: string;
    marketId: string;
    fillId: string;
    isBuy: boolean;
    size: bigint;
    priceZ: bigint;
    feeZ: bigint;
    fundingZ: bigint;
    positionAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionLiquidatedEvent {
  export type InputTuple = [
    user: AddressLike,
    marketId: BytesLike,
    positionSizeClosed: BigNumberish,
    collateralLostZ: BigNumberish,
    liquidationFeeZ: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    marketId: string,
    positionSizeClosed: bigint,
    collateralLostZ: bigint,
    liquidationFeeZ: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    marketId: string;
    positionSizeClosed: bigint;
    collateralLostZ: bigint;
    liquidationFeeZ: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    marketId: BytesLike,
    newSize: BigNumberish,
    entryPriceZ: BigNumberish,
    unrealizedPnlZ: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    marketId: string,
    newSize: bigint,
    entryPriceZ: bigint,
    unrealizedPnlZ: bigint
  ];
  export interface OutputObject {
    account: string;
    marketId: string;
    newSize: bigint;
    entryPriceZ: bigint;
    unrealizedPnlZ: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    marketId: BytesLike,
    symbol: string,
    isLong: boolean,
    amountBase: BigNumberish,
    leverageX: BigNumberish,
    entryPriceZ: BigNumberish,
    exitPriceZ: BigNumberish,
    collateralUsedToken: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    marketId: string,
    symbol: string,
    isLong: boolean,
    amountBase: bigint,
    leverageX: bigint,
    entryPriceZ: bigint,
    exitPriceZ: bigint,
    collateralUsedToken: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    marketId: string;
    symbol: string;
    isLong: boolean;
    amountBase: bigint;
    leverageX: bigint;
    entryPriceZ: bigint;
    exitPriceZ: bigint;
    collateralUsedToken: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PerpEngine extends BaseContract {
  connect(runner?: ContractRunner | null): PerpEngine;
  waitForDeployment(): Promise<this>;

  interface: PerpEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  closePosition: TypedContractMethod<
    [marketId: BytesLike],
    [void],
    "nonpayable"
  >;

  collateralManager: TypedContractMethod<[], [string], "view">;

  computeAccountMMRZ: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  entryPriceZ: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  feeSplitter: TypedContractMethod<[], [string], "view">;

  getOpenMarketsForAccount: TypedContractMethod<
    [account: AddressLike],
    [string[]],
    "view"
  >;

  getPosition: TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [bigint],
    "view"
  >;

  getPositionMarginRatioBps: TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUnrealizedPnlZ: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [admin: AddressLike, _vault: AddressLike],
    [void],
    "nonpayable"
  >;

  liquidate: TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [void],
    "nonpayable"
  >;

  markets: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string] & {
        base: string;
        baseDecimals: bigint;
        symbol: string;
      }
    ],
    "view"
  >;

  openPosition: TypedContractMethod<
    [
      marketId: BytesLike,
      isLong: boolean,
      collateralZToken: BigNumberish,
      leverageX: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  oracleRouter: TypedContractMethod<[], [string], "view">;

  positions: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  recordFill: TypedContractMethod<
    [f: IPerpEngine.FillStruct],
    [void],
    "nonpayable"
  >;

  "registerMarket(bytes32,address,uint8,string)": TypedContractMethod<
    [
      marketId: BytesLike,
      base: AddressLike,
      baseDecimals: BigNumberish,
      symbol: string
    ],
    [void],
    "nonpayable"
  >;

  "registerMarket(bytes32,address,uint8)": TypedContractMethod<
    [marketId: BytesLike, base: AddressLike, baseDecimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  riskConfig: TypedContractMethod<[], [string], "view">;

  seenFill: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  setDeps: TypedContractMethod<
    [
      _risk: AddressLike,
      _oracleRouter: AddressLike,
      _collateralManager: AddressLike,
      _treasury: AddressLike,
      _feeSplitter: AddressLike,
      _zUsd: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  updatePositionMargin: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  zUsd: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<[marketId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateralManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeAccountMMRZ"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "entryPriceZ"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeSplitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOpenMarketsForAccount"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionMarginRatioBps"
  ): TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUnrealizedPnlZ"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [admin: AddressLike, _vault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [account: AddressLike, marketId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string] & {
        base: string;
        baseDecimals: bigint;
        symbol: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "openPosition"
  ): TypedContractMethod<
    [
      marketId: BytesLike,
      isLong: boolean,
      collateralZToken: BigNumberish,
      leverageX: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracleRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordFill"
  ): TypedContractMethod<[f: IPerpEngine.FillStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerMarket(bytes32,address,uint8,string)"
  ): TypedContractMethod<
    [
      marketId: BytesLike,
      base: AddressLike,
      baseDecimals: BigNumberish,
      symbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerMarket(bytes32,address,uint8)"
  ): TypedContractMethod<
    [marketId: BytesLike, base: AddressLike, baseDecimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "riskConfig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "seenFill"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setDeps"
  ): TypedContractMethod<
    [
      _risk: AddressLike,
      _oracleRouter: AddressLike,
      _collateralManager: AddressLike,
      _treasury: AddressLike,
      _feeSplitter: AddressLike,
      _zUsd: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updatePositionMargin"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "zUsd"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "PositionLiquidated"
  ): TypedContractEvent<
    PositionLiquidatedEvent.InputTuple,
    PositionLiquidatedEvent.OutputTuple,
    PositionLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionUpdated"
  ): TypedContractEvent<
    PositionUpdatedEvent.InputTuple,
    PositionUpdatedEvent.OutputTuple,
    PositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Liquidation(address,bytes32,uint128,uint128,uint128)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "OrderFilled(address,bytes32,bytes32,bool,uint128,uint128,uint128,int128,int256)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;

    "PositionLiquidated(address,bytes32,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PositionLiquidatedEvent.InputTuple,
      PositionLiquidatedEvent.OutputTuple,
      PositionLiquidatedEvent.OutputObject
    >;
    PositionLiquidated: TypedContractEvent<
      PositionLiquidatedEvent.InputTuple,
      PositionLiquidatedEvent.OutputTuple,
      PositionLiquidatedEvent.OutputObject
    >;

    "PositionUpdated(address,bytes32,int256,uint128,int256)": TypedContractEvent<
      PositionUpdatedEvent.InputTuple,
      PositionUpdatedEvent.OutputTuple,
      PositionUpdatedEvent.OutputObject
    >;
    PositionUpdated: TypedContractEvent<
      PositionUpdatedEvent.InputTuple,
      PositionUpdatedEvent.OutputTuple,
      PositionUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TradeExecuted(address,bytes32,string,bool,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
