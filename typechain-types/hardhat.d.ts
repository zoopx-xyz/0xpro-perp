/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Constants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Constants__factory>;
    getContractFactory(
      name: "CollateralManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CollateralManager__factory>;
    getContractFactory(
      name: "FeeSplitterSpoke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeSplitterSpoke__factory>;
    getContractFactory(
      name: "FundingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingModule__factory>;
    getContractFactory(
      name: "ICollateralManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollateralManager__factory>;
    getContractFactory(
      name: "IFeeSplitterSpoke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeSplitterSpoke__factory>;
    getContractFactory(
      name: "IFundingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFundingModule__factory>;
    getContractFactory(
      name: "IMarginVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarginVault__factory>;
    getContractFactory(
      name: "IOracleRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleRouter__factory>;
    getContractFactory(
      name: "IPerpEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPerpEngine__factory>;
    getContractFactory(
      name: "IRiskConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRiskConfig__factory>;
    getContractFactory(
      name: "ITreasurySpoke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasurySpoke__factory>;
    getContractFactory(
      name: "MarginVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarginVaultV2__factory>;
    getContractFactory(
      name: "MarketFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketFactory__factory>;
    getContractFactory(
      name: "OracleRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleRouter__factory>;
    getContractFactory(
      name: "PerpEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpEngine__factory>;
    getContractFactory(
      name: "RiskConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RiskConfig__factory>;
    getContractFactory(
      name: "SignedPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignedPriceOracle__factory>;
    getContractFactory(
      name: "TreasurySpoke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasurySpoke__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockzUSD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockzUSD__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Constants",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Constants>;
    getContractAt(
      name: "CollateralManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CollateralManager>;
    getContractAt(
      name: "FeeSplitterSpoke",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeSplitterSpoke>;
    getContractAt(
      name: "FundingModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FundingModule>;
    getContractAt(
      name: "ICollateralManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollateralManager>;
    getContractAt(
      name: "IFeeSplitterSpoke",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeSplitterSpoke>;
    getContractAt(
      name: "IFundingModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFundingModule>;
    getContractAt(
      name: "IMarginVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarginVault>;
    getContractAt(
      name: "IOracleRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleRouter>;
    getContractAt(
      name: "IPerpEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPerpEngine>;
    getContractAt(
      name: "IRiskConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRiskConfig>;
    getContractAt(
      name: "ITreasurySpoke",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreasurySpoke>;
    getContractAt(
      name: "MarginVaultV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarginVaultV2>;
    getContractAt(
      name: "MarketFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketFactory>;
    getContractAt(
      name: "OracleRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleRouter>;
    getContractAt(
      name: "PerpEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpEngine>;
    getContractAt(
      name: "RiskConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RiskConfig>;
    getContractAt(
      name: "SignedPriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SignedPriceOracle>;
    getContractAt(
      name: "TreasurySpoke",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TreasurySpoke>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockzUSD",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockzUSD>;

    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    deployContract(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967Upgradeable>;
    deployContract(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeaconUpgradeable>;
    deployContract(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Constants",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Constants>;
    deployContract(
      name: "CollateralManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CollateralManager>;
    deployContract(
      name: "FeeSplitterSpoke",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeSplitterSpoke>;
    deployContract(
      name: "FundingModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundingModule>;
    deployContract(
      name: "ICollateralManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICollateralManager>;
    deployContract(
      name: "IFeeSplitterSpoke",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeSplitterSpoke>;
    deployContract(
      name: "IFundingModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFundingModule>;
    deployContract(
      name: "IMarginVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarginVault>;
    deployContract(
      name: "IOracleRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleRouter>;
    deployContract(
      name: "IPerpEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPerpEngine>;
    deployContract(
      name: "IRiskConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRiskConfig>;
    deployContract(
      name: "ITreasurySpoke",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITreasurySpoke>;
    deployContract(
      name: "MarginVaultV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarginVaultV2>;
    deployContract(
      name: "MarketFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketFactory>;
    deployContract(
      name: "OracleRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleRouter>;
    deployContract(
      name: "PerpEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngine>;
    deployContract(
      name: "RiskConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RiskConfig>;
    deployContract(
      name: "SignedPriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignedPriceOracle>;
    deployContract(
      name: "TreasurySpoke",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TreasurySpoke>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockzUSD",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockzUSD>;

    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "IERC1822ProxiableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    deployContract(
      name: "IERC1967Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967Upgradeable>;
    deployContract(
      name: "IBeaconUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeaconUpgradeable>;
    deployContract(
      name: "ERC1967UpgradeUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Constants",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Constants>;
    deployContract(
      name: "CollateralManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CollateralManager>;
    deployContract(
      name: "FeeSplitterSpoke",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeSplitterSpoke>;
    deployContract(
      name: "FundingModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundingModule>;
    deployContract(
      name: "ICollateralManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICollateralManager>;
    deployContract(
      name: "IFeeSplitterSpoke",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeSplitterSpoke>;
    deployContract(
      name: "IFundingModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFundingModule>;
    deployContract(
      name: "IMarginVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarginVault>;
    deployContract(
      name: "IOracleRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracleRouter>;
    deployContract(
      name: "IPerpEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPerpEngine>;
    deployContract(
      name: "IRiskConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRiskConfig>;
    deployContract(
      name: "ITreasurySpoke",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITreasurySpoke>;
    deployContract(
      name: "MarginVaultV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarginVaultV2>;
    deployContract(
      name: "MarketFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketFactory>;
    deployContract(
      name: "OracleRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleRouter>;
    deployContract(
      name: "PerpEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngine>;
    deployContract(
      name: "RiskConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RiskConfig>;
    deployContract(
      name: "SignedPriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignedPriceOracle>;
    deployContract(
      name: "TreasurySpoke",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TreasurySpoke>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockzUSD",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockzUSD>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
